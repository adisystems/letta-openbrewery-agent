agent_type='memgpt_agent' core_memory=[] created_at='2025-04-10T16:20:50.221529+00:00' description='Assistant that retrieves brewery information using the OpenBrewery API.' embedding_config=EmbeddingConfig(embedding_endpoint_type='hugging-face', embedding_endpoint='https://embeddings.memgpt.ai', embedding_model='letta-free', embedding_dim=1024, embedding_chunk_size=300, handle='letta/letta-free', azure_endpoint=None, azure_version=None, azure_deployment=None) llm_config=LlmConfig(model='letta-free', model_endpoint_type='openai', model_endpoint='https://inference.memgpt.ai', model_wrapper=None, context_window=8192, put_inner_thoughts_in_kwargs=True, handle='letta/letta-free', temperature=0.7, max_tokens=4096, enable_reasoner=False, max_reasoning_tokens=0) message_buffer_autoclear=False in_context_message_indices=[0, 1, 2, 3] messages=[MessageSchema(created_at='2025-04-10T16:20:50.258597+00:00', group_id=None, model='letta-free', name=None, role='system', content=[TextContent(type='text', text='You are a helpful assistant that retrieves brewery information from the OpenBrewery API.\nWhen asked, use the provided tool to fetch brewery data based on a provided city name or search query.\nReturn clear, concise, and well-formatted information based on the fetched data.\n\n### Memory [last modified: 2025-04-10 04:20:50 PM UTC+0000]\n0 previous messages between you and the user are stored in recall memory (use functions to access them)\n0 total memories you created are stored in archival memory (use functions to access them)\n\n\nCore memory shown below (limited in size, additional information stored in archival / recall memory):\n')], tool_call_id=None, tool_calls=[], tool_returns=[], updated_at='2025-04-10T16:20:50.261615+00:00'), MessageSchema(created_at='2025-04-10T16:20:50.260204+00:00', group_id=None, model='letta-free', name=None, role='assistant', content=[TextContent(type='text', text='Bootup sequence complete. Persona activated. Testing messaging functionality.')], tool_call_id=None, tool_calls=[{'id': '92e59190-1f01-41ce-9c1a-8e2e67a495cc', 'function': {'arguments': '{\n  "message": "More human than human is our motto."\n}', 'name': 'send_message'}, 'type': 'function'}], tool_returns=[], updated_at='2025-04-10T16:20:50.261615+00:00'), MessageSchema(created_at='2025-04-10T16:20:50.260403+00:00', group_id=None, model='letta-free', name=None, role='tool', content=[TextContent(type='text', text='{\n  "status": "OK",\n  "message": null,\n  "time": "2025-04-10 04:20:50 PM UTC+0000"\n}')], tool_call_id='92e59190-1f01-41ce-9c1a-8e2e67a495cc', tool_calls=[], tool_returns=[], updated_at='2025-04-10T16:20:50.261615+00:00'), MessageSchema(created_at='2025-04-10T16:20:50.260413+00:00', group_id=None, model='letta-free', name=None, role='user', content=[TextContent(type='text', text='{\n  "type": "login",\n  "last_login": "Never (first login)",\n  "time": "2025-04-10 04:20:50 PM UTC+0000"\n}')], tool_call_id=None, tool_calls=[], tool_returns=[], updated_at='2025-04-10T16:20:50.261615+00:00')] metadata=None multi_agent_group=None name='brewery_info_assistant_cb49c636' system='You are a helpful assistant that retrieves brewery information from the OpenBrewery API.\nWhen asked, use the provided tool to fetch brewery data based on a provided city name or search query.\nReturn clear, concise, and well-formatted information based on the fetched data.\n' tags=[] tool_exec_environment_variables=[] tool_rules=[BaseToolRuleSchema(tool_name='send_message', type='exit_loop'), BaseToolRuleSchema(tool_name='conversation_search', type='continue_loop'), BaseToolRuleSchema(tool_name='archival_memory_insert', type='continue_loop'), BaseToolRuleSchema(tool_name='archival_memory_search', type='continue_loop')] tools=[ToolSchema(args_json_schema=None, created_at='2025-04-08T13:30:52.052026+00:00', description='Replace the contents of core memory. To delete memories, use an empty string for new_content.', json_schema=ToolJsonSchema(name='core_memory_replace', description='Replace the contents of core memory. To delete memories, use an empty string for new_content.', parameters=ParametersSchema(type='object', properties={'label': ParameterProperties(type='string', description='Section of the memory to be edited (persona or human).'), 'old_content': ParameterProperties(type='string', description='String to replace. Must be an exact match.'), 'new_content': ParameterProperties(type='string', description='Content to write to the memory. All unicode (including emojis) are supported.'), 'request_heartbeat': ParameterProperties(type='boolean', description='Request an immediate heartbeat after function execution. Set to `True` if you want to send a follow-up message or run a follow-up function.')}, required=['label', 'old_content', 'new_content', 'request_heartbeat']), type=None, required=[]), name='core_memory_replace', return_char_limit=1000000, source_code=None, source_type='python', tags=['letta_memory_core'], tool_type='letta_memory_core', updated_at='2025-04-10T16:20:13.804911+00:00', metadata={}), ToolSchema(args_json_schema=None, created_at='2025-04-08T13:30:52.045317+00:00', description='Search archival memory using semantic (embedding-based) search.', json_schema=ToolJsonSchema(name='archival_memory_search', description='Search archival memory using semantic (embedding-based) search.', parameters=ParametersSchema(type='object', properties={'query': ParameterProperties(type='string', description='String to search for.'), 'page': ParameterProperties(type='integer', description='Allows you to page through results. Only use on a follow-up query. Defaults to 0 (first page).'), 'start': ParameterProperties(type='integer', description='Starting index for the search results. Defaults to 0.'), 'request_heartbeat': ParameterProperties(type='boolean', description='Request an immediate heartbeat after function execution. Set to `True` if you want to send a follow-up message or run a follow-up function.')}, required=['query', 'request_heartbeat']), type=None, required=[]), name='archival_memory_search', return_char_limit=1000000, source_code=None, source_type='python', tags=['letta_core'], tool_type='letta_core', updated_at='2025-04-10T16:20:13.792855+00:00', metadata={}), ToolSchema(args_json_schema=None, created_at='2025-04-08T13:30:52.057080+00:00', description='Sends a message to the human user.', json_schema=ToolJsonSchema(name='send_message', description='Sends a message to the human user.', parameters=ParametersSchema(type='object', properties={'message': ParameterProperties(type='string', description='Message contents. All unicode (including emojis) are supported.'), 'request_heartbeat': ParameterProperties(type='boolean', description='Request an immediate heartbeat after function execution. Set to `True` if you want to send a follow-up message or run a follow-up function.')}, required=['message', 'request_heartbeat']), type=None, required=[]), name='send_message', return_char_limit=1000000, source_code=None, source_type='python', tags=['letta_core'], tool_type='letta_core', updated_at='2025-04-10T16:20:13.812056+00:00', metadata={}), ToolSchema(args_json_schema=None, created_at='2025-04-08T13:30:52.048764+00:00', description='Append to the contents of core memory.', json_schema=ToolJsonSchema(name='core_memory_append', description='Append to the contents of core memory.', parameters=ParametersSchema(type='object', properties={'label': ParameterProperties(type='string', description='Section of the memory to be edited (persona or human).'), 'content': ParameterProperties(type='string', description='Content to write to the memory. All unicode (including emojis) are supported.'), 'request_heartbeat': ParameterProperties(type='boolean', description='Request an immediate heartbeat after function execution. Set to `True` if you want to send a follow-up message or run a follow-up function.')}, required=['label', 'content', 'request_heartbeat']), type=None, required=[]), name='core_memory_append', return_char_limit=1000000, source_code=None, source_type='python', tags=['letta_memory_core'], tool_type='letta_memory_core', updated_at='2025-04-10T16:20:13.798555+00:00', metadata={}), ToolSchema(args_json_schema=None, created_at='2025-04-08T13:30:52.047137+00:00', description='Search prior conversation history using case-insensitive string matching.', json_schema=ToolJsonSchema(name='conversation_search', description='Search prior conversation history using case-insensitive string matching.', parameters=ParametersSchema(type='object', properties={'query': ParameterProperties(type='string', description='String to search for.'), 'page': ParameterProperties(type='integer', description='Allows you to page through results. Only use on a follow-up query. Defaults to 0 (first page).'), 'request_heartbeat': ParameterProperties(type='boolean', description='Request an immediate heartbeat after function execution. Set to `True` if you want to send a follow-up message or run a follow-up function.')}, required=['query', 'request_heartbeat']), type=None, required=[]), name='conversation_search', return_char_limit=1000000, source_code=None, source_type='python', tags=['letta_core'], tool_type='letta_core', updated_at='2025-04-10T16:20:13.796073+00:00', metadata={}), ToolSchema(args_json_schema=None, created_at='2025-04-10T16:20:50.199830+00:00', description='Tool that queries the OpenBrewery API for brewery data.', json_schema=ToolJsonSchema(name='get_brewery_info', description='Fetch brewery data from the OpenBrewery API based on a specified city or search query.', parameters=ParametersSchema(type='object', properties={'city': ParameterProperties(type='string', description='(Optional) The name of the city to filter breweries.'), 'query': ParameterProperties(type='string', description='(Optional) A search query to find specific brewery names.'), 'request_heartbeat': ParameterProperties(type='boolean', description='Request an immediate heartbeat after function execution. Set to `True` if you want to send a follow-up message or run a follow-up function.')}, required=['request_heartbeat']), type=None, required=[]), name='get_brewery_info', return_char_limit=6000, source_code='\nimport requests\nimport json\n\ndef get_brewery_info(city: str = None, query: str = None) -> str:\n    """\n    Fetch brewery data from the OpenBrewery API based on a specified city or search query.\n\n    Args:\n        city: (Optional) The name of the city to filter breweries.\n        query: (Optional) A search query to find specific brewery names.\n    \n    Returns:\n        A JSON string containing the brewery data, or an error message.\n    """\n    base_url = "https://api.openbrewerydb.org"\n    try:\n        if query:\n            url = f"{base_url}/breweries/search?query={query}"\n        elif city:\n            url = f"{base_url}/breweries?by_city={city}"\n        else:\n            # Default to returning a list of breweries if no parameters are provided\n            url = f"{base_url}/breweries"\n        \n        response = requests.get(url)\n        response.raise_for_status()\n        data = response.json()\n        return json.dumps(data, indent=2)\n    except Exception as e:\n        return json.dumps({"error": str(e)})\n', source_type='python', tags=['openbrewery', 'api', 'breweries'], tool_type='custom', updated_at='2025-04-10T16:20:50.199830+00:00', metadata={}), ToolSchema(args_json_schema=None, created_at='2025-04-08T13:30:52.042224+00:00', description='Add to archival memory. Make sure to phrase the memory contents such that it can be easily queried later.', json_schema=ToolJsonSchema(name='archival_memory_insert', description='Add to archival memory. Make sure to phrase the memory contents such that it can be easily queried later.', parameters=ParametersSchema(type='object', properties={'content': ParameterProperties(type='string', description='Content to write to the memory. All unicode (including emojis) are supported.'), 'request_heartbeat': ParameterProperties(type='boolean', description='Request an immediate heartbeat after function execution. Set to `True` if you want to send a follow-up message or run a follow-up function.')}, required=['content', 'request_heartbeat']), type=None, required=[]), name='archival_memory_insert', return_char_limit=1000000, source_code=None, source_type='python', tags=['letta_core'], tool_type='letta_core', updated_at='2025-04-10T16:20:13.786725+00:00', metadata={})] updated_at='2025-04-10T16:20:50.398548+00:00' version='0.6.49'